services:
  envio-postgres:
    image: postgres:16
    restart: always
    container_name: coolify-db
    ports:
      - "${ENVIO_PG_PORT:-5433}:5432"
    volumes:
      - coolify-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${ENVIO_POSTGRES_PASSWORD:-testing}
      POSTGRES_USER: ${ENVIO_PG_USER:-postgres}
      POSTGRES_DB: ${ENVIO_PG_DATABASE:-envio-dev}
    networks:
      - coolify

  graphql-engine:
    image: hasura/graphql-engine:v2.23.0
    ports:
      - "${HASURA_EXTERNAL_PORT:-9000}:8080"
    user: 1001:1001
    depends_on:
      - "envio-postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${ENVIO_POSTGRES_PASSWORD:-testing}@envio-postgres:5432/envio-dev
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE:-true}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES:
        startup, http-log, webhook-log, websocket-log,
        query-log
      HASURA_GRAPHQL_NO_OF_RETRIES: 10
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-testing}
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
      PORT: 8080
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
    # healthcheck:
    #   test: timeout 1s bash -c ':> /dev/tv1p/127.0.0.1/8080' || exit 1
    #   interval: 5s
    #   timeout: 2s
    #   retries: 50
    #   start_period: 5s
    networks:
      - coolify

  envio-indexer:
    container_name: envio-indexer
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      graphql-engine:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
    restart: always
    environment:
      ENVIO_POSTGRES_PASSWORD: ${ENVIO_POSTGRES_PASSWORD:-testing}
      ENVIO_PG_HOST: envio-postgres
      ENVIO_PG_PORT: 5432
      ENVIO_PG_USER: ${ENVIO_PG_USER:-postgres}
      ENVIO_PG_DATABASE: ${ENVIO_PG_DATABASE:-envio-dev}
      PG_PASSWORD: ${ENVIO_POSTGRES_PASSWORD:-testing}
      PG_HOST: envio-postgres
      PG_PORT: 5432
      PG_USER: ${ENVIO_PG_USER:-postgres}
      PG_DATABASE: ${ENVIO_PG_DATABASE:-envio-dev}
      CONFIG_FILE: ${CONFIG_FILE:-config.yaml}
      LOG_LEVEL: ${LOG_LEVEL:-trace}
      LOG_STRATEGY: ${LOG_STRATEGY:-console-pretty}
      MAX_QUEUE_SIZE: 50_000
      MAX_BATCH_SIZE: 10_000
      HASURA_GRAPHQL_ENDPOINT: http://graphql-engine:8080/v1/metadata
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-testing}
      HASURA_SERVICE_HOST: graphql-engine
      HASURA_SERVICE_PORT: 8080
      TUI_OFF: ${TUI_OFF:-true}
      SOKOS_CONSOLE_URL: ${SOKOS_CONSOLE_URL:-https://console.sokos.io}
    # healthcheck:
    #   test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8081' || exit 1
    #   interval: 5s
    #   timeout: 2s
    #   retries: 50
    #   start_period: 5s
    networks:
      - coolify
  sokos-indexer:
    container_name: envio-indexer
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      graphql-engine:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
    restart: always
    environment:
      ENVIO_POSTGRES_PASSWORD: ${ENVIO_POSTGRES_PASSWORD:-testing}
      ENVIO_PG_HOST: envio-postgres
      ENVIO_PG_PORT: 5432
      ENVIO_PG_USER: ${ENVIO_PG_USER:-postgres}
      ENVIO_PG_DATABASE: ${ENVIO_PG_DATABASE:-envio-dev}
      PG_PASSWORD: ${ENVIO_POSTGRES_PASSWORD:-testing}
      PG_HOST: envio-postgres
      PG_PORT: 5432
      PG_USER: ${ENVIO_PG_USER:-postgres}
      PG_DATABASE: ${ENVIO_PG_DATABASE:-envio-dev}
      CONFIG_FILE: ${CONFIG_FILE:-config.yaml}
      LOG_LEVEL: ${LOG_LEVEL:-trace}
      LOG_STRATEGY: ${LOG_STRATEGY:-console-pretty}
      MAX_QUEUE_SIZE: 50_000
      MAX_BATCH_SIZE: 10_000
      HASURA_GRAPHQL_ENDPOINT: http://graphql-engine:8080/v1/metadata
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-testing}
      HASURA_SERVICE_HOST: graphql-engine
      HASURA_SERVICE_PORT: 8080
      TUI_OFF: ${TUI_OFF:-true}
      SOKOS_CONSOLE_URL: ${SOKOS_CONSOLE_URL:-https://console.sokos.io}
    # healthcheck:
    #   test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8081' || exit 1
    #   interval: 5s
    #   timeout: 2s
    #   retries: 50
    #   start_period: 5s
    networks:
      - coolify


volumes:
  coolify-db:

networks:
  coolify:
    name: coolify
    external: true